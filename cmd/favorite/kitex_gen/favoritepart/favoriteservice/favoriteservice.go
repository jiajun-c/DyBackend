// Code generated by Kitex v0.4.4. DO NOT EDIT.

package favoriteservice

import (
	"context"
	favoritepart "favorite/kitex_gen/favoritepart"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return favoriteServiceServiceInfo
}

var favoriteServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "FavoriteService"
	handlerType := (*favoritepart.FavoriteService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Favorite": kitex.NewMethodInfo(favoriteHandler, newFavoriteServiceFavoriteArgs, newFavoriteServiceFavoriteResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "favoritepart",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func favoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favoritepart.FavoriteServiceFavoriteArgs)
	realResult := result.(*favoritepart.FavoriteServiceFavoriteResult)
	success, err := handler.(favoritepart.FavoriteService).Favorite(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceFavoriteArgs() interface{} {
	return favoritepart.NewFavoriteServiceFavoriteArgs()
}

func newFavoriteServiceFavoriteResult() interface{} {
	return favoritepart.NewFavoriteServiceFavoriteResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Favorite(ctx context.Context, req *favoritepart.FavoriteActionRequest) (r *favoritepart.FavoriteActionResponse, err error) {
	var _args favoritepart.FavoriteServiceFavoriteArgs
	_args.Req = req
	var _result favoritepart.FavoriteServiceFavoriteResult
	if err = p.c.Call(ctx, "Favorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
