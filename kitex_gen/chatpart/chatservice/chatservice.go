// Code generated by Kitex v0.4.4. DO NOT EDIT.

package chatservice

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
	chatpart "tiktok/kitex_gen/chatpart"
)

func serviceInfo() *kitex.ServiceInfo {
	return chatServiceServiceInfo
}

var chatServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ChatService"
	handlerType := (*chatpart.ChatService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetChatHistory":  kitex.NewMethodInfo(getChatHistoryHandler, newGetChatHistoryArgs, newGetChatHistoryResult, false),
		"DoMessageAction": kitex.NewMethodInfo(doMessageActionHandler, newDoMessageActionArgs, newDoMessageActionResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "chat",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func getChatHistoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(chatpart.DouyinMessageChatRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(chatpart.ChatService).GetChatHistory(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetChatHistoryArgs:
		success, err := handler.(chatpart.ChatService).GetChatHistory(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetChatHistoryResult)
		realResult.Success = success
	}
	return nil
}
func newGetChatHistoryArgs() interface{} {
	return &GetChatHistoryArgs{}
}

func newGetChatHistoryResult() interface{} {
	return &GetChatHistoryResult{}
}

type GetChatHistoryArgs struct {
	Req *chatpart.DouyinMessageChatRequest
}

func (p *GetChatHistoryArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(chatpart.DouyinMessageChatRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetChatHistoryArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetChatHistoryArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetChatHistoryArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetChatHistoryArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetChatHistoryArgs) Unmarshal(in []byte) error {
	msg := new(chatpart.DouyinMessageChatRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetChatHistoryArgs_Req_DEFAULT *chatpart.DouyinMessageChatRequest

func (p *GetChatHistoryArgs) GetReq() *chatpart.DouyinMessageChatRequest {
	if !p.IsSetReq() {
		return GetChatHistoryArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetChatHistoryArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetChatHistoryResult struct {
	Success *chatpart.DouyinMessageChatResponse
}

var GetChatHistoryResult_Success_DEFAULT *chatpart.DouyinMessageChatResponse

func (p *GetChatHistoryResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(chatpart.DouyinMessageChatResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetChatHistoryResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetChatHistoryResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetChatHistoryResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetChatHistoryResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetChatHistoryResult) Unmarshal(in []byte) error {
	msg := new(chatpart.DouyinMessageChatResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetChatHistoryResult) GetSuccess() *chatpart.DouyinMessageChatResponse {
	if !p.IsSetSuccess() {
		return GetChatHistoryResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetChatHistoryResult) SetSuccess(x interface{}) {
	p.Success = x.(*chatpart.DouyinMessageChatResponse)
}

func (p *GetChatHistoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func doMessageActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(chatpart.DouyinMessageActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(chatpart.ChatService).DoMessageAction(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DoMessageActionArgs:
		success, err := handler.(chatpart.ChatService).DoMessageAction(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DoMessageActionResult)
		realResult.Success = success
	}
	return nil
}
func newDoMessageActionArgs() interface{} {
	return &DoMessageActionArgs{}
}

func newDoMessageActionResult() interface{} {
	return &DoMessageActionResult{}
}

type DoMessageActionArgs struct {
	Req *chatpart.DouyinMessageActionRequest
}

func (p *DoMessageActionArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(chatpart.DouyinMessageActionRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DoMessageActionArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DoMessageActionArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DoMessageActionArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in DoMessageActionArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *DoMessageActionArgs) Unmarshal(in []byte) error {
	msg := new(chatpart.DouyinMessageActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DoMessageActionArgs_Req_DEFAULT *chatpart.DouyinMessageActionRequest

func (p *DoMessageActionArgs) GetReq() *chatpart.DouyinMessageActionRequest {
	if !p.IsSetReq() {
		return DoMessageActionArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DoMessageActionArgs) IsSetReq() bool {
	return p.Req != nil
}

type DoMessageActionResult struct {
	Success *chatpart.DouyinMessageActionResponse
}

var DoMessageActionResult_Success_DEFAULT *chatpart.DouyinMessageActionResponse

func (p *DoMessageActionResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(chatpart.DouyinMessageActionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DoMessageActionResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DoMessageActionResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DoMessageActionResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in DoMessageActionResult")
	}
	return proto.Marshal(p.Success)
}

func (p *DoMessageActionResult) Unmarshal(in []byte) error {
	msg := new(chatpart.DouyinMessageActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DoMessageActionResult) GetSuccess() *chatpart.DouyinMessageActionResponse {
	if !p.IsSetSuccess() {
		return DoMessageActionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DoMessageActionResult) SetSuccess(x interface{}) {
	p.Success = x.(*chatpart.DouyinMessageActionResponse)
}

func (p *DoMessageActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetChatHistory(ctx context.Context, Req *chatpart.DouyinMessageChatRequest) (r *chatpart.DouyinMessageChatResponse, err error) {
	var _args GetChatHistoryArgs
	_args.Req = Req
	var _result GetChatHistoryResult
	if err = p.c.Call(ctx, "GetChatHistory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DoMessageAction(ctx context.Context, Req *chatpart.DouyinMessageActionRequest) (r *chatpart.DouyinMessageActionResponse, err error) {
	var _args DoMessageActionArgs
	_args.Req = Req
	var _result DoMessageActionResult
	if err = p.c.Call(ctx, "DoMessageAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
